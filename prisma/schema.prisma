datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  externalId       String          @unique
  profilePicture   String?
  createdAt        DateTime        @default(now())
  email            String          @unique
  username         String          @unique
  given_name       String?
  family_name      String?
  birthdate        DateTime?
  currentLocation  String?
  hometown         String?
  profession       String?
  bio              String?
  contactDetails   ContactDetails? @relation("ContactDetails")
  socialLinks      SocialLinks?    @relation("SocialLinks")
  interests        String[]
  skills           String[]
  hobbies          String[]
  images           String[]
  connectionsFrom  Connection[]    @relation("ConnectionFrom")
  connectionsTo    Connection[]    @relation("ConnectionTo")
  sentRequests     Request[]       @relation("SentRequests")
  receivedRequests Request[]       @relation("ReceivedRequests")
  updates          Update[]        @relation("UserUpdates")
}

model ContactDetails {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation("ContactDetails", fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  phone   String? @unique
  address String?
}

model SocialLinks {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation("SocialLinks", fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  facebook    String?
  instagram   String?
  linkedIn    String?
  github      String?
  twitter     String?
  website     String?
  snapchat    String?
  behance     String?
  tiktok      String?
  whatsapp    String?
  customLinks Json?
}

enum Level {
  known
  closer
  closest
}

enum RequestStatus {
  Accepted
  Rejected
  Pending
}

model Connection {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation("ConnectionFrom", fields: [userId], references: [id])
  userId           String        @db.ObjectId
  connectedUser    User          @relation("ConnectionTo", fields: [connectedUserId], references: [id])
  connectedUserId  String        @db.ObjectId
  connectionStatus RequestStatus
  level            Level         @default(known)
}

model Request {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime      @default(now())
  fromUser   User          @relation("SentRequests", fields: [fromUserId], references: [id])
  fromUserId String        @db.ObjectId
  toUser     User          @relation("ReceivedRequests", fields: [toUserId], references: [id])
  toUserId   String        @db.ObjectId
  level      Level         @default(known)
  status     RequestStatus @default(Pending)
}

model Update {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content   String
  level     Level    @default(known)
  user      User     @relation("UserUpdates", fields: [userId], references: [id])
  userId    String   @db.ObjectId
}
