datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId 
  externalId      String      @unique
  profilePicture  String?
  createdAt       DateTime    @default(now())
  email           String      @unique
  username        String      @unique
  given_name      String?
  family_name     String?
  birthdate       DateTime?
  currentLocation String?
  hometown        String?
  profession      String?
  bio             String?
  contactDetails  ContactDetails? @relation("ContactDetails")
  socialLinks     SocialLinks? @relation("SocialLinks")
  interests       String[]
  hobbies         String[]
  images          String[]
  connectionsFrom Connection[] @relation("ConnectionFrom")
  connectionsTo   Connection[] @relation("ConnectionTo")
}

model ContactDetails {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user        User        @relation("ContactDetails", fields: [userId], references: [id]) 
  userId      String      @db.ObjectId @unique

  phone       String?     @unique
  address     String?
}

model SocialLinks {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  user     User        @relation("SocialLinks", fields: [userId], references: [id]) 
  userId   String      @db.ObjectId @unique

  facebook String?
  Instagram String?
}

enum Level {
  known
  closer
  closest
}

enum ConnectionStatus{
  Connected
  Rejected
  Pending
}

model Connection {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation("ConnectionFrom",fields: [userId], references: [id])
  userId          String      @db.ObjectId
  connectedUser   User        @relation("ConnectionTo", fields: [connectedUserId], references: [id]) 
  connectedUserId String      @db.ObjectId 
  connectionStatus  ConnectionStatus
  level           Level       @default(known)
  messages        Message[]
}



enum MessageStatus {
  NotShared
  Shared
}

model Message {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  timeOfMemory  DateTime?
  content       String
  status        MessageStatus      @default(NotShared)
  connection    Connection  @relation(fields: [connectionId], references: [id])
  connectionId  String      @db.ObjectId
}
